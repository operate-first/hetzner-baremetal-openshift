---
- include_tasks: boot-rescue.yaml
  when: ansible_hostname != 'rescue'

- name: Check download urls
  uri:
    method: HEAD
    url: "{{ item }}"
    status_code:
      - 200
      # Forbidden because of github forwards to aws s3.
      # HEAD request to S3 is forbidden
      - 403
  with_items:
    - "{{ coreos_install_url }}"
    - "{{ coreos_image_url }}"


- name: Download RCOS
  get_url:
    url: "{{ coreos_image_url }}"
    dest: "/root/{{ coreos_image_url | basename }}"

- name: Download coreos-installer
  get_url:
    url: "{{ coreos_install_url }}"
    dest: "/root/{{ coreos_install_url | basename }}"
    mode: a+x

- name: Create network config folder
  ansible.builtin.file:
    path: /root/network-config
    state: directory

- name: "Create Network {{ network_primary_interface }}.nmconnection"
  ansible.builtin.template:
    src: device.nmconnection
    dest: "/root/network-config/{{ network_primary_interface }}.nmconnection"
    owner: root
    group: root
    mode: '0600'

- name: "Create Network vlan{{ network_vlanid }}.nmconnection"
  ansible.builtin.template:
    src: vlan.nmconnection
    dest: "/root/network-config/vlan{{ network_vlanid }}.nmconnection"
    owner: root
    group: root
    mode: '0600'

- name: "Create ssh-only.ignition"
  ansible.builtin.template:
    src: ssh-only.ignition
    dest: "/root/ssh-only.ignition"
    owner: root
    group: root
    mode: '0600'

- name: Info
  debug:
    msg:
      - "Please run:"
      - "./coreos-installer install {{ install_device }} --ignition-file ssh-only.ignition --copy-network --firstboot-args='rd.neednet=1' --network-dir ./network-config/ --insecure --image-file rhcos-4.6.1-x86_64-metal.x86_64.raw.gz"

# - name: Copy autosetup configuration file
#   template:
#     src: "{{ hetzner_autosetup_file }}"
#     dest: /root/autosetup
#     owner: root
#     group: root
#     mode: 0644

# - name: Run installimage
#   command: "/root/.oldroot/nfs/install/installimage -a -c /root/autosetup"
#   environment:
#     TERM: "vt100"
#   ignore_errors: true
#   register: result

# - debug:
#     var: result
#     verbosity: 1

# - name: Check stderr from installimage
#   fail:
#     msg: "Something want wrong at installimage: {{ result.stderr_lines | join('\n') }}"
#   when:
#     - result.stderr_lines | length > 0
#     - hetzner_image_ignore_errors == false

# - name: Check stdout from installimage
#   fail:
#     msg: "Something want wrong at installimage: {{ result.stdout_lines | join('\n') }}"
#   when:
#     - result.stdout is search('An error occured while installing the new system!')
#     - hetzner_image_ignore_errors == false

# - name: Reboot server
#   shell: sleep 2 && shutdown -r now
#   async: 1
#   poll: 0
#   ignore_errors: yes

# - name: Remove server from local known_hosts file
#   local_action: command  /usr/bin/ssh-keygen -R {{ inventory_hostname }}
#   ignore_errors: yes

# - name: Wait 300 seconds for port 22 to become open
#   wait_for:
#     port: 22
#     host: '{{ inventory_hostname }}'
#     delay: 10
#     timeout: 300
#   connection: local

# - name: Check ansible_python_interpreter
#   ping:
#   register: rc
#   ignore_errors: true

# - name: Set ansible_python_interpreter to /usr/libexec/platform-python (RHEL 8)
#   set_fact:
#     ansible_python_interpreter: /usr/libexec/platform-python
#   when: rc.failed == true

# - name: Disable password authentication
#   lineinfile:
#     path: /etc/ssh/sshd_config
#     regexp: '^PasswordAuthentication yes'
#     line: 'PasswordAuthentication no'

# - name: Restart sshd
#   systemd:
#     name: sshd.service
#     state: restarted
